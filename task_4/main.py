import asyncio
import hashlib
from time import sleep

from pytoniq import StateInit, Contract, LiteBalancer, WalletV4R2
from pytoniq_core import HashMap, begin_cell, Builder, Address
from codes import *
from schemes import JettonMinterData, JettonWalletData
from seed import mnemo

def key_serializer(key: str):
    return int.from_bytes(hashlib.sha256(key.encode()).digest(), 'big')

def value_serializer(src: str, dest: Builder):
    return dest.store_ref(begin_cell().store_uint(0, 8).store_snake_string(src).end_cell())

def get_metadata():
    hm = HashMap(256, key_serializer=key_serializer, value_serializer=value_serializer)

    hm.set('name', 'Bowl token')
    hm.set('description', 'Food token')
    hm.set('symbol', 'BWL')
    image = ''
    hm.set('image_data', image)

    return begin_cell().store_uint(0, 8).store_dict(hm.serialize()).end_cell()

async def get_minter(client: LiteBalancer):
    content = get_metadata()
    data = JettonMinterData(
        total_supply=0,
        admin_address=Address('0QCZy07U-c7-qH30s9mHbqD4N-IhAfSD7YgRda6-UeGu-jhQ'),
        content=content,
        jetton_wallet_code=jetton_wallet_code
    )
    state_init = StateInit(code=jetton_minter_code, data=data.serialize())
    return await Contract.from_state_init(client, workchain=0, state_init=state_init)

async def deploy_minter(client: LiteBalancer):
    wallet = await WalletV4R2.from_mnemonic(client, mnemo)
    minter = await get_minter(client)
    await wallet.transfer(destination=minter.address, amount=2 * 10 ** 7, state_init=minter.state_init)

def get_mint_body(addr: str, ton_amount: int, token_amount: int):
    return (begin_cell()
            .store_uint(21, 32)
            .store_uint(0, 64)
            .store_address(addr)
            .store_coins(ton_amount)
            .store_ref(
        begin_cell()
        .store_uint(0x178d4519, 32)
        .store_uint(0, 64)
        .store_coins(token_amount)
        .store_address(None)
        .store_address(None)
        .store_coins(0)
        .store_bit(0)
        .end_cell()
    )
            .end_cell())

def get_change_metadata_body(name: str, desc: str, symbol: str, image: str):
    hm = HashMap(256, key_serializer=key_serializer, value_serializer=value_serializer)

    hm.set('name', name)
    hm.set('description', desc)
    hm.set('symbol', symbol)
    image = image
    hm.set('image_data', image)

    return begin_cell().store_uint(4, 32).store_uint(0, 64).store_ref(
        begin_cell()
            .store_uint(0, 8)
            .store_dict(hm.serialize())
        .end_cell()
    ).end_cell()

def get_change_owner_body(new_owner: Address):
    return (begin_cell()
            .store_uint(3, 32)
            .store_uint(0, 64)
            .store_address(new_owner)
            .end_cell())

async def mint_tokens(client: LiteBalancer):
    body = get_mint_body('0QBOrhNyLCPNnt7MUVxJVUSEUQF6_10q7plprvRwCiqYhMy4', 2 * 10 ** 7, token_amount=500000 * 10 ** 9)
    wallet = await WalletV4R2.from_mnemonic(client, mnemo)
    minter = await get_minter(client)
    await wallet.transfer(destination=minter.address, amount=4 * 10 ** 7, body=body)

async def change_token_metadata(client: LiteBalancer):
    body = get_change_metadata_body(
        name='Bowl',
        desc='Tasty bowl',
        symbol="BOWL",
        image=''
    )
    wallet = await WalletV4R2.from_mnemonic(client, mnemo)
    minter = await get_minter(client)
    await wallet.transfer(destination=minter.address, amount=2 * 10 ** 7, body=body)

async def change_owner(client: LiteBalancer):
    body = get_change_owner_body(Address((0, b'\x00' * 32)))
    wallet = await WalletV4R2.from_mnemonic(client, mnemo)
    minter = await get_minter(client)
    await wallet.transfer(destination=minter.address, amount=2 * 10 ** 7, body=body)

async def main():
    async with LiteBalancer.from_testnet_config(trust_level=2) as client:
        # await deploy_minter(client)
        # await mint_tokens(client)
        await change_token_metadata(client)
        # await change_owner(client)

asyncio.run(main())
